// Adapted from https://github.com/cs4215-seville/oxido-lang
/**
* A program is composed of declarations (both function & variable/static)
* TODO: Modules, extern crates, use declarations
**/

identifier = @{
    keyword ~ (ASCII_ALPHANUMERIC | "_")+
    | !keyword ~!ASCII_DIGIT ~ (ASCII_ALPHANUMERIC | "_")
}

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!NEWLINE ~ ANY)* } // See https://doc.rust-lang.org/reference/comments.html

WHITESPACE = _{ " " | "\t" | "\r" | "\n" } // See https://doc.rust-lang.org/reference/whitespace.html

keyword = _{
    boolean_literal
    | "as"
    | "break"
    | "const"
    | "continue"
    | "crate"
    | "else"
    | "enum"
    | "extern"
    | "fn"
    | "for"
    | "if"
    | "impl"
    | "in"
    | "let"
    | "loop"
    | "match"
    | "mod"
    | "move"
    | "mut"
    | "pub"
    | "ref"
    | "return"
    | "self"
    | "Self"
    | "static"
    | "struct"
    | "super"
    | "trait"
    | "type"
    | "unsafe"
    | "use"
    | "where"
    | "while"
}

literal = { string_literal | char_literal | boolean_literal | integer_literal} // TODO: Add Floats

// TODO: Need to implement floats
char_literal = {
     !("\"" | "\\") ~ ANY
     | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
     | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
string_literal = {
    "\"" ~ inner_chars ~ "\""
}
inner_chars = @{
    char_literal*
}
integer_literal = @{
    ASCII_DIGIT+
}
boolean_literal = { "true" | "false" }

//symbol = { "::" | "->" | '#' | '[' | ']' | '(' | ')' | '{' | '}' | ',' | ';' }

// TODO: Path Expressions, Macros, Crates, Structs, Enums

item = {mod_item | fn_item | const_item | static_item } // type_item | struct_item | enum_item | trait_item | impl_item | extern_block_item}

// Modules
mod_item = {"mod" ~ identifier ~ (";" | "{" ~ module ~ "}")}
module = { view_item | item }

view_item = { (extern_crate_decl) ~ ";" } // Complete: use_decl
extern_crate_decl = { "extern" ~ "crate" ~ crate_name }
crate_name = {identifier | (identifier ~ "as" ~ identifier)}

// Function Declaration
fn_item = {
      "fn " ~ identifier ~ ("<" ~ lifetime_param_list ~ ">")? ~ "(" ~ function_param_list ~ ")" ~
      function_return_type? ~ block
}

function_return_type = { "->" ~ type_item }

lifetime_param_list = { lifetime_type_variable ~ ("," ~ lifetime_type_variable)* | "" }
lifetime_type_variable = @{ "'" ~ !ASCII_DIGIT ~ ("_" ~ (ASCII_ALPHANUMERIC | "_")+ | !"_" ~ (ASCII_ALPHANUMERIC | "_")+) }

function_param_list = { function_param ~ ("," ~ function_param)* | "" }
function_param = { identifier ~ ":" ~ type_item }

// Type Definitions
type_item = { primitive_type | tuple_type | array_type | reference_type | function_type }
primitive_type = { "i8" | "i16" | "i32" | "i64" | "i128" | "u8" | "u16" | "u32" | "u64" | "u128" | "f32" | "f64" | "bool" | "char" | "str" | "()" | "usize" | "isize" }
tuple_type = { "(" ~ ")" | "(" ~ type_item ~ ("," ~ type_item)* ~ ")" }
array_type = {"[" ~ type_item ~ ";" ~ expression ~ "]" }
// reference_type = {"&" ~ ("mut" ~ WHITESPACE)? ~ type}
reference_type = { "&" ~ lifetime_type_variable? ~ mutable_specifier? ~ type_item }
function_type = { "fn" ~ "(" ~ parameter_list ~ ")" ~ function_return_type? }
parameter_list = { parameter ~ ("," ~ parameter)* | ""}
parameter = { identifier ~ ":" ~ type_item }

// Struct
// struct_item = { "struct" ~ WHITESPACE ~ identifier ~ "{" ~ field_definition ~ ("," ~ WHITESPACE ~ field_definition)* ~ "}" }
// Const
const_item = { "const" ~ identifier ~ ":" ~ type_item ~ "=" ~ expression ~ ";" }
// Static
static_item = {
    "static" ~ mutable_specifier? ~ identifier ~ ":" ~ type_item ~ "=" ~ expression ~ ";"
}
mutable_specifier = { "mut " } // mutable vars are defined with the mut keyword

program = {
    SOI ~ (item)* ~ EOI
}
block = { "{" ~ sequence ~ expr_statement? ~ "}" }

sequence =  { (statement | block)* }

statement = {decl_statement | expr_statement}

decl_statement = { item | let_statement }

let_statement = {
    "let" ~ identifier ~ type_placeholder? ~ init? ~ ";"  } // LET STATEMENT FOR TUPLES, ARRAYS, MATCH, PATTERN ETC
type_placeholder = {":" ~ type_item }
init = { "=" ~ expression }

expr_statement = { expression ~ ";" }

expression = { literal | tuple_expr | unit_expr
                    | block_expr | method_call_expr | array_expr
                    | idx_expr | range_expr | unop_expr | binop_expr
                    | paren_expr | call_expr | lambda_expr | while_expr
                    | loop_expr | break_expr | continue_expr | for_expr
                    | if_expr | if_let_expr | while_let_expr
                    | return_expr  }


/**
* See https://doc.rust-lang.org/reference/types.html
* TODO: arch (isize, usize), Never! type, Sequences, User-Defined, function_type, Closure type, Pointers (Reference_type), Traits
**/
// datatype = { "i8" | "i16" | "i32" | "i64" | "i128" | "u8" | "u16" | "u32" | "u64" | "u128" | "f64" | "f32" | "char" | "str" | "bool" | "String" | "()" }



statement = { declaration | static_declaration | function_declaration | expr_statement }



// // No whitespace allowed between digits
// integer = @{ ASCII_DIGIT+ }
//
// unary_minus = { "-" }
// primary = _{ integer | "(" ~ expr ~ ")" }
// atom = _{ unary_minus? ~primary }
//
// bin_op = _{ add | subtract | multiply | divide | modulo}
// 	add = { "+" }
// 	subtract = { "-" }
// 	multiply = { "*" }
// 	divide = { "/" }
// 	modulo = { "%" }
//
// expr = { atom ~ (bin_op ~ atom)* }
//
// // We can't have SOI and EOI on expr directly, because it is used recursively (e.g. with parentheses)
// equation = _{ SOI ~ expr ~ EOI }
//
// WHITESPACE = _{ " " }
